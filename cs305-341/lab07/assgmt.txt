Unlike previous experiments which used simulators, this lab session will make measurements on a REAL machine.

PART 1: The goal is to estimate the size of the cache on your machine. Note that there may be two or three levels of cache (L1, L2, L3 ) and we need to find each of their capacities. You may wish to declare an array of size x bytes and then write into each element of the array with STRIDE s (i.e. every sth element). Then read each of those elements in the same order. Measure and report the mean and variance of the access times. One way to measure time to execute a statement is to use gettimeofday( ) but you should explore other ways too. You must make a sensible choice of s. (Ideally s should be the block size - likely to be 32 or 64 on modern machines). Start with array size x = 1 KB. Repeat the experiment, doubling x each time until you note an anomaly . . . Prepare useful plots of access times and show how you concluded what the cache sizes were. Prepare a 1-page report to explain the results. 

PART 2: Design an experiment to obtain the block size. Use the fact that if a requested byte is not in cache, the entire block bearing the byte has to be fetched and the access time will be high. However, subsequently, remaining bytes in the block will take much less time. Be aware that some machines use hardware pre-fetching of blocks. You will have to factor this in your measurements. You may wish to use the clflush instruction to manually evict a block to handle the effects of pre-fetching. Again, prepare useful and insightful plots to convey your results together with a 1-page report. This experiment is to be done in a team of size TWO. Only make one submission per group. Clearly mention the roll numbers of both the team members in the submission. Also, the name of the file submitted should be in the format ROLLNO1__ROLLNO2.zip. During the viva for this lab, you will be asked to run your code and display the relevant measurements.
