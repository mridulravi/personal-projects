
	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $fp, 0($sp)		# Save the frame pointer
	sub $fp, $sp, 4		# Update the frame pointer

	sub $sp, $sp, 48		# Make space for the locals
# Prologue ends


label2:
	li $v0, 10
	sw $v0, -40($fp)
	li $v0, 10
	sw $v0, -32($fp)
	li $v0, 5
	sw $v0, -28($fp)
	li $v0, 2
	sw $v0, -24($fp)
	li $v0, 3
	sw $v0, -20($fp)
	li.d $f2, 0.30
	s.d $f2, -12($fp)
	lw $v0, -40($fp)
	lw $t0, -32($fp)
	add $t1, $v0, $t0
	lw $v0, -20($fp)
	mul $t0, $t1, $v0
	lw $v0, -28($fp)
	lw $t1, -24($fp)
	sub $t2, $v0, $t1
	lw $v0, -40($fp)
	lw $t1, -32($fp)
	sub $t3, $v0, $t1
	sgt $v0, $t2, $t3
	div $t1, $t0, $v0
	sw $t1, 0($fp)
	lw $v0, -40($fp)
	neg $t0, $v0
	sw $t0, -36($fp)
	j label4

label3:
	lw $v0, -32($fp)
	mtc1 $f2, $v0
	l.d $f4, -12($fp)
	mul.d $f6, $f2, $f4
	neg.d $f2, $f6
	s.d $f2, -12($fp)
	lw $v0, -40($fp)
	li $t0, 1
	add $t1, $v0, $t0
	sw $t1, -40($fp)
	lw $v0, -36($fp)
	li $t0, 1
	add $t1, $v0, $t0
	sw $t1, -36($fp)

label4:
	lw $v0, -36($fp)
	lw $t0, -32($fp)
	slt $t1, $v0, $t0
	bne $t1, $zero, label3
	j label5

label5:

# Epilogue Begins
	add $sp, $sp, 48
	lw $fp, 0($sp)  
	jr        $31		# Jump back to the operating system.
# Epilogue Ends

