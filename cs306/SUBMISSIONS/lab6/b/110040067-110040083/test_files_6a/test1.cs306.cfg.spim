
	.text 			# The .text assembler directive indicates
	.globl main		# The following is the code (as oppose to data)
main:				# .globl makes main know to the 
				# outside of the program.
# Prologue begins 
	sw $fp, 0($sp)		# Save the frame pointer
	sub $fp, $sp, 4		# Update the frame pointer

	sub $sp, $sp, 48		# Make space for the locals
# Prologue ends


label2:    	
	li $v0, 1
	sw $v0, -24($fp)
	li $v0, 2
	sw $v0, -20($fp)
	li $v0, 3
	sw $v0, -16($fp)
	li $v0, 4
	sw $v0, -12($fp)
	li $v0, 5
	sw $v0, -8($fp)
	li.d $f2, 0.30
	s.d $f2, 0($fp)
	lw $v0, -20($fp)
	li $t0, 1
	sgt $t1, $v0, $t0
	bne $t1, $zero, label3 
	j label4

label3:    	
	lw $v0, -16($fp)
	lw $t0, -24($fp)
	div $t1, $v0, $t0
	mtc1 $f2, $t1
	l.d $f4, 0($fp)
	add.d $f6, $f2, $f4
	s.d $f6, 0($fp)
	lw $v0, -24($fp)
	lw $t0, -20($fp)
	add $t1, $v0, $t0
	sw $t1, -24($fp)
	j label12

label4:    	
	lw $v0, -20($fp)
	lw $t0, -16($fp)
	add $t1, $v0, $t0
	lw $v0, -24($fp)
	sle $t0, $t1, $v0
	bne $t0, $zero, label5 
	j label6

label5:    	
	li.d $f2, 1.00
	s.d $f2, -28($fp)
	j label7

label6:    	
	li.d $f2, 0.00
	s.d $f2, -28($fp)

label7:    	
	l.d $f2, -28($fp)
	l.d $f4, 0($fp)
	sgt $v0, $f2, $f4
	li $t0, 0
	sne $t1, $v0, $t0
	bne $t1, $zero, label8 
	j label9

label8:    	
	li.d $f2, 1.00
	s.d $f2, -36($fp)
	j label10

label9:    	
	li.d $f2, 0.00
	s.d $f2, -36($fp)

label10:    	
	l.d $f2, -36($fp)
	lw $v0, -12($fp)
	mtc1 $f4, $v0
	l.d $f6, 0($fp)
	mul.d $f8, $f4, $f6
	lw $v0, -24($fp)
	mtc1 $f4, $v0
	div.d $f6, $f8, $f4
	sgt $v0, $f2, $f6
	li $t0, 0
	sne $t1, $v0, $t0
	bne $t1, $zero, label11 
	j label12

label11:    	
	lw $v0, -24($fp)
	li $t0, 1
	add $t1, $v0, $t0
	sw $t1, -24($fp)
	lw $v0, -16($fp)
	lw $t0, -24($fp)
	sub $t1, $v0, $t0
	sw $t1, -20($fp)

label12:    	

# Epilogue Begins
	add $sp, $sp, 48
	lw $fp, 0($sp)  
	jr        $31		# Jump back to the operating system.
# Epilogue Ends

