#lang racket

(define (is-single-digit q)
  (and (<= q 9) (>= q 0)))

(define (convert t v)
  (+(* t 10) v))

(define (mult r s)
  (if (is-single-digit s)
      (multunic r s)
      (+ (mult r (remainder s 10)) (* (mult r (quotient s 10)) 10))))

(define (multunic x y)
  (if (and (is-single-digit x) (is-single-digit y))
      (* x y)
      (convert (+ (multunic (quotient x 10)
                            y)
                          (quotient (* (remainder x 10) y) 10))
               (remainder (* (remainder x 10) y) 10))))

(define (akmult x y)
  (cond [(= x 0) 0]
       [(= x 1) y]
       [(even? x) (* 2 (akmult (quotient x 2) y))]
       [(odd? x) (+ (* 2 (akmult (quotient x 2) y)) y)]))



(define (factorial n)
  (if (= n 0) 1
      (* n (factorial (- n 1)))))





(define (fact-iter n acc)
  (if (= n 0) acc
      (fact-iter (- n 1) (* n acc))))

(define (fib n)
  (cond [(= n 0) 1]
        [(= n 1) 1]
        [else (+ (fib (- n 1)) (fib (- n 2)))]))

(define (fibnew n)
  (cond [(= n 0) 1]
        [(= n 1) 1]
        [else (fib-iter 1 1 2 n)]))

(define (fib-iter n1 n2 i n)
  (if (= i n) (+ n1 n2)
      (fib-iter n2 (+ n1 n2) (+ i 1) n)))

(define (akmultnew x y)
  (akmultiter x y 0))
(define (akmultiter x y c)
  (cond [(even? x) (akmultiter (/ x 2) (* 2 y) c)]
        [else (if (> x 1)
                  (akmultiter (quotient x 2) (* 2 y) (+ c y))
                  (+ y c))]))

(define (exp x y)
  (cond [(= y 1) x]
        [(odd? y) (* (exp x (quotient y 2)) (exp x (quotient y 2)) x)]
        [else (* (exp x (quotient y 2)) (exp x (quotient y 2)))]))

(define (expmod x y n)
  (cond [(= y 1) (remainder x n)]
        [(odd? y) (expmod (* (expmod x (quotient y 2) n) (expmod x (quotient y 2) n) (expmod x 1 n)) 1 n)]
        [else (expmod (* (expmod x (quotient y 2) n) (expmod x (quotient y 2) n)) 1 n)]))

(define (gcd a b)
  (if (= b 0) a
      (gcd b (remainder a b))))

(define (has_solution a b c)
  (= (remainder c (gcd a b)) 0))

(define (hof op1 op2 n m k)
  (define (hof-h i)
    (if (> i k) 
        (op2 (m i) (n i))
        (op1 (n i) (op2 (m i) (hof-h (+ i 1))))))
  (hof-h 1))

(define (tan x k)
  (define (n i) (if( = i 1) x (* x x)))
  (define (m i) (-(* 2 i) 1))
  (hof / - n m k))
;
;(define (sub x y)
;  (sub-single x y ))

;(define (sub-single x y )
;  (if (and (is-single-digit x) (is-single-digit y))
;      (- (convert z x) y)
;      (convert (sub-single (quotient x 10) (quotient y 10) z) (sub-single (remainder x 10) (remainder y 10) z))))


(define (div x y)
  (cond [(< x y) (cons 0 x)]
        [(even? x) (let* ((result (div (quotient x 2) y))
                        (qdash (car result))
                        (rdash (cdr result)))
                     (if (< (* 2 rdash) y)
                         (cons (* 2 qdash) (* 2 rdash))
                         (cons (+ (* 2 qdash) 1) (- (* 2 rdash) y))))]
        [(odd? x) (let* ((result (div (quotient x 2) y))
                        (qdash (car result))
                        (rdash (cdr result)))
                     (if (< (+ (* 2 rdash) 1) y)
                         (cons (* 2 qdash) (+ (* 2 rdash) 1))
                         (cons (+ (* 2 qdash) 1) (+ (- (* 2 rdash) y) 1))))]))

(define (coeff a b)
  (cond [(= b 0) (cons 1 0)]
        [else (let* ((ans (coeff b (remainder a b)))
                    (xd (car ans))
                    (yd (cdr ans)))
                (cons yd (- xd (* (quotient a b) yd))))])) 

(define (inverse e n)
  (if ( = (gcd e n) 1)
   (car (coeff e n))
   (error "e & n should be coprime for inverse to exist")))

(define (triangle n)
  (tri-iter 5 1 3 n))

(define (tri-iter n1 n2 i n)
  (if (= i n)
      (+ ( + (- (* 2 n1) n2) n) (quotient n 2))
      (tri-iter (+ ( + (- (* 2 n1) n2) i) (quotient i 2)) n1 (+ i 1) n)))

(define (simplify r)
  (let*((p (car r))
       (q (cdr r))
       (t (gcd p q)))
    (cons (/ p t) (/ q t))))
       
(define (add r1 r2)
  (let*((p (car r1))
       (q (cdr r1))
       (r (car r2))
       (s (cdr r2)))
    (simplify (cons (+ (* p s) (* r q)) (* q s)))))

(define (minchange n)
  (change 0 n 50))

(define (change acc n c)
  (cond [(= c 50) (change (+ acc (quotient n c)) (remainder n c) 25)]
        [(= c 25) (change (+ acc (quotient n c)) (remainder n c) 20)]
        [(= c 20) (change (+ acc (quotient n c)) (remainder n c) 10)]
        [(= c 10) (change (+ acc (quotient n c)) (remainder n c) 5)]
        [(= c 5) (change (+ acc (quotient n c)) (remainder n c) 3)]
        [(= c 3) (change (+ acc (quotient n c)) (remainder n c) 2)]
        [(= c 2) (change (+ acc (quotient n c)) (remainder n c) 1)]
        [(= c 1) (+ acc n)]))