//checking whether enter is pressed

if you want to check whether enter is being pressed or not you cannot use cin to first input the character and then compare with \n or ascii value 10 because the >> operators are for inputting formatted text so you must either use low-level input functions (like cin.get()) or getchar to enter the character and then you can compare.
header file for getchar is cstdio


//take filename as runtime input

if you take filename (which is to be opened) as a runtime input then store the filename in a string file and use the command fout.fopen(filename.c_str) where fout may be of ofstream or ifstream.

//using vector class

in vector the no of elements can change , you do not have to define the exact no of elements.you can simply add elements using push_back() function and print elements using pop_back() function
eg:-  vector<int> myvector;			// declaring a vector variable;
      int a;
      cin>>a;
      myvector.push_back(a);
      

// myfile.good() is no longer true, which will happen either if the end of the file has been reached or if some other error occurred.
eg:-	if (myfile.is_open())
  {
    while ( myfile.good() )
    {
      getline (myfile,line);
      cout << line << endl;
    }
    myfile.close();
  }
  
 In addition to good(), which checks whether the stream is ready for input/output operations, other member functions exist to check for specific states of a stream (all of them return a bool value):

bad()
    Returns true if a reading or writing operation fails. For example in the case that we try to write to a file that is not open for writing or if the device where we try to write has no space left.
fail()
    Returns true in the same cases as bad(), but also in the case that a format error happens, like when an alphabetical character is extracted when we are trying to read an integer number.
eof()
    Returns true if a file open for reading has reached the end.
good()
    It is the most generic state flag: it returns false in the same cases in which calling any of the previous functions would return true.


In order to reset the state flags checked by any of these member functions we have just seen we can use the member function clear(), which takes no parameters.


//go through this code once

// obtaining file size
#include <iostream>
#include <fstream>
using namespace std;

int main () {
  long begin,end;
  ifstream myfile ("example.txt");
  begin = myfile.tellg();
  myfile.seekg (0, ios::end);
  end = myfile.tellg();
  myfile.close();
  cout << "size is: " << (end-begin) << " bytes.\n";
  return 0;
}



//tellg and seekg while reading (ifstream)
//tellp and seekp while writing (ofstream)


//You can use cin.get(myfile, character) to look at each individual character. 



// reading a complete binary file
#include <iostream>
#include <fstream>
using namespace std;

ifstream::pos_type size;
char * memblock;

int main () {
  ifstream file ("example.bin", ios::in|ios::binary|ios::ate);
  if (file.is_open())
  {
    size = file.tellg();
    memblock = new char [size];
    file.seekg (0, ios::beg);
    file.read (memblock, size);
    file.close();

    cout << "the complete file content is in memory";

    delete[] memblock;
  }
  else cout << "Unable to open file";
  return 0;
}


//If we write:

*p++ = *q++; 

Because ++ has a higher precedence than *, both p and q are increased, but because both increase operators (++) are used as postfix and not prefix, the value assigned to *p is *q before both p and q are increased. And then both are increased. It would be roughly equivalent to:

*p = *q;
++p;
++q;


//2D array with size taken during runtime

char **maze;
	int n;
	cout<<"enter the value of n \n";
	cin>>n;
	maze=new char *[n];
	for(int i=0;i<n;i++){
		maze[i]=new char[n];
	}



//deleting 2D array
	for(int i=0;i<n;i++)
		delete[] maze[i];
	delete[] maze;

