#include <iostream>
#include <vector>
#include <cstdlib>
#include <Event.h>
using namespace std;

template <typename Comparable>

class BinaryHeap
{
  public: 
	explicit BinaryHeap ( int capacity = 100 );
	explicit BinaryHeap ( const vector<Comparable> & items);

	bool isEmpty() const;
	const Comparable & findmin() const;

	void insert(const Comparable & x);
	void deleteMin();
	void deleteMin(Comparable & minItem);
	void makeEmpty();

  private:
	int currentSize;
	vector<Comparable> array;
	void buildHeap();
	void percolateDown ( int hole);
};

void BinaryHeap::insert(const Comparable & x)
{
	if(currentSize == array.size() - 1)
		array.resize(array.size()*2);

	int hole = ++currentSize;
	for(;hole > 1 && x < array[hole/2]; hole/=2)
		array[hole]=array[hole/2];
	array[hole] = x;
}

void BinaryHeap::deleteMin()
{
	if (isEmpty())
	     exit(1);
	
	array[1] = array[currentSize--];
	percolateDown(1);
}

void BinaryHeap::deleteMin(Comparable &
































