#include <iostream>
#include <vector>
#include <cstdlib>

//#include <Event.h>
using namespace std;


template <typename Comparable>

class IndexMinPQ
{
private: int N;
	// number of elements on PQ
private: vector<int> pq;
	// binary heap using 1-based indexing
private: vector<int> qp;
	// inverse: qp[pq[i]] = pq[qp[i]] = i
private: vector<Comparable> keys;
	// items with priorities
public: IndexMinPQ(int maxN=10)
{
	keys = new Comparable[maxN + 1];
	pq= new int[maxN + 1];
	qp= new int[maxN + 1];
	for (int i = 0; i <= maxN; i++)
	 	qp[i] = -1;
}

public: bool isEmpty()
{ return N == 0; }
public: bool contains(int k)
{ return qp[k] != -1; }
/*
public void insert(int k, Comparable<Key> key)
{
	N++;
	qp[k] = N;
	pq[N] = k;
	keys[k] = key;
	swim(N);
}*/

public: Item min()
{ return keys[pq[1]];
}
/*
public int delMin()
{
	int indexOfMin = pq[1];
	exch(1, N--);
	sink(1);
	keys[pq[N+1]] = null;
	qp[pq[N+1]] = -1;
	return indexOfMin;
}*/
};
