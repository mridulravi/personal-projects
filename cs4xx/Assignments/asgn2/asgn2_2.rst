                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW64)
                                      4 ; This file was generated Sat Jan 31 22:26:39 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module asgn2_2
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _t0Delay56ms
                                     14 	.globl _display
                                     15 	.globl _setSegment
                                     16 	.globl _t0Delay
                                     17 	.globl _CY
                                     18 	.globl _AC
                                     19 	.globl _F0
                                     20 	.globl _RS1
                                     21 	.globl _RS0
                                     22 	.globl _OV
                                     23 	.globl _FL
                                     24 	.globl _P
                                     25 	.globl _TF2
                                     26 	.globl _EXF2
                                     27 	.globl _RCLK
                                     28 	.globl _TCLK
                                     29 	.globl _EXEN2
                                     30 	.globl _TR2
                                     31 	.globl _C_T2
                                     32 	.globl _CP_RL2
                                     33 	.globl _T2CON_7
                                     34 	.globl _T2CON_6
                                     35 	.globl _T2CON_5
                                     36 	.globl _T2CON_4
                                     37 	.globl _T2CON_3
                                     38 	.globl _T2CON_2
                                     39 	.globl _T2CON_1
                                     40 	.globl _T2CON_0
                                     41 	.globl _PT2
                                     42 	.globl _PS
                                     43 	.globl _PT1
                                     44 	.globl _PX1
                                     45 	.globl _PT0
                                     46 	.globl _PX0
                                     47 	.globl _RD
                                     48 	.globl _WR
                                     49 	.globl _T1
                                     50 	.globl _T0
                                     51 	.globl _INT1
                                     52 	.globl _INT0
                                     53 	.globl _TXD
                                     54 	.globl _RXD
                                     55 	.globl _P3_7
                                     56 	.globl _P3_6
                                     57 	.globl _P3_5
                                     58 	.globl _P3_4
                                     59 	.globl _P3_3
                                     60 	.globl _P3_2
                                     61 	.globl _P3_1
                                     62 	.globl _P3_0
                                     63 	.globl _EA
                                     64 	.globl _ET2
                                     65 	.globl _ES
                                     66 	.globl _ET1
                                     67 	.globl _EX1
                                     68 	.globl _ET0
                                     69 	.globl _EX0
                                     70 	.globl _P2_7
                                     71 	.globl _P2_6
                                     72 	.globl _P2_5
                                     73 	.globl _P2_4
                                     74 	.globl _P2_3
                                     75 	.globl _P2_2
                                     76 	.globl _P2_1
                                     77 	.globl _P2_0
                                     78 	.globl _SM0
                                     79 	.globl _SM1
                                     80 	.globl _SM2
                                     81 	.globl _REN
                                     82 	.globl _TB8
                                     83 	.globl _RB8
                                     84 	.globl _TI
                                     85 	.globl _RI
                                     86 	.globl _T2EX
                                     87 	.globl _T2
                                     88 	.globl _P1_7
                                     89 	.globl _P1_6
                                     90 	.globl _P1_5
                                     91 	.globl _P1_4
                                     92 	.globl _P1_3
                                     93 	.globl _P1_2
                                     94 	.globl _P1_1
                                     95 	.globl _P1_0
                                     96 	.globl _TF1
                                     97 	.globl _TR1
                                     98 	.globl _TF0
                                     99 	.globl _TR0
                                    100 	.globl _IE1
                                    101 	.globl _IT1
                                    102 	.globl _IE0
                                    103 	.globl _IT0
                                    104 	.globl _P0_7
                                    105 	.globl _P0_6
                                    106 	.globl _P0_5
                                    107 	.globl _P0_4
                                    108 	.globl _P0_3
                                    109 	.globl _P0_2
                                    110 	.globl _P0_1
                                    111 	.globl _P0_0
                                    112 	.globl _B
                                    113 	.globl _A
                                    114 	.globl _ACC
                                    115 	.globl _PSW
                                    116 	.globl _TH2
                                    117 	.globl _TL2
                                    118 	.globl _RCAP2H
                                    119 	.globl _RCAP2L
                                    120 	.globl _T2MOD
                                    121 	.globl _T2CON
                                    122 	.globl _IP
                                    123 	.globl _P3
                                    124 	.globl _IE
                                    125 	.globl _P2
                                    126 	.globl _SBUF
                                    127 	.globl _SCON
                                    128 	.globl _P1
                                    129 	.globl _TH1
                                    130 	.globl _TH0
                                    131 	.globl _TL1
                                    132 	.globl _TL0
                                    133 	.globl _TMOD
                                    134 	.globl _TCON
                                    135 	.globl _PCON
                                    136 	.globl _DPH
                                    137 	.globl _DPL
                                    138 	.globl _SP
                                    139 	.globl _P0
                                    140 ;--------------------------------------------------------
                                    141 ; special function registers
                                    142 ;--------------------------------------------------------
                                    143 	.area RSEG    (ABS,DATA)
      000000                        144 	.org 0x0000
                           000080   145 G$P0$0$0 == 0x0080
                           000080   146 _P0	=	0x0080
                           000081   147 G$SP$0$0 == 0x0081
                           000081   148 _SP	=	0x0081
                           000082   149 G$DPL$0$0 == 0x0082
                           000082   150 _DPL	=	0x0082
                           000083   151 G$DPH$0$0 == 0x0083
                           000083   152 _DPH	=	0x0083
                           000087   153 G$PCON$0$0 == 0x0087
                           000087   154 _PCON	=	0x0087
                           000088   155 G$TCON$0$0 == 0x0088
                           000088   156 _TCON	=	0x0088
                           000089   157 G$TMOD$0$0 == 0x0089
                           000089   158 _TMOD	=	0x0089
                           00008A   159 G$TL0$0$0 == 0x008a
                           00008A   160 _TL0	=	0x008a
                           00008B   161 G$TL1$0$0 == 0x008b
                           00008B   162 _TL1	=	0x008b
                           00008C   163 G$TH0$0$0 == 0x008c
                           00008C   164 _TH0	=	0x008c
                           00008D   165 G$TH1$0$0 == 0x008d
                           00008D   166 _TH1	=	0x008d
                           000090   167 G$P1$0$0 == 0x0090
                           000090   168 _P1	=	0x0090
                           000098   169 G$SCON$0$0 == 0x0098
                           000098   170 _SCON	=	0x0098
                           000099   171 G$SBUF$0$0 == 0x0099
                           000099   172 _SBUF	=	0x0099
                           0000A0   173 G$P2$0$0 == 0x00a0
                           0000A0   174 _P2	=	0x00a0
                           0000A8   175 G$IE$0$0 == 0x00a8
                           0000A8   176 _IE	=	0x00a8
                           0000B0   177 G$P3$0$0 == 0x00b0
                           0000B0   178 _P3	=	0x00b0
                           0000B8   179 G$IP$0$0 == 0x00b8
                           0000B8   180 _IP	=	0x00b8
                           0000C8   181 G$T2CON$0$0 == 0x00c8
                           0000C8   182 _T2CON	=	0x00c8
                           0000C9   183 G$T2MOD$0$0 == 0x00c9
                           0000C9   184 _T2MOD	=	0x00c9
                           0000CA   185 G$RCAP2L$0$0 == 0x00ca
                           0000CA   186 _RCAP2L	=	0x00ca
                           0000CB   187 G$RCAP2H$0$0 == 0x00cb
                           0000CB   188 _RCAP2H	=	0x00cb
                           0000CC   189 G$TL2$0$0 == 0x00cc
                           0000CC   190 _TL2	=	0x00cc
                           0000CD   191 G$TH2$0$0 == 0x00cd
                           0000CD   192 _TH2	=	0x00cd
                           0000D0   193 G$PSW$0$0 == 0x00d0
                           0000D0   194 _PSW	=	0x00d0
                           0000E0   195 G$ACC$0$0 == 0x00e0
                           0000E0   196 _ACC	=	0x00e0
                           0000E0   197 G$A$0$0 == 0x00e0
                           0000E0   198 _A	=	0x00e0
                           0000F0   199 G$B$0$0 == 0x00f0
                           0000F0   200 _B	=	0x00f0
                                    201 ;--------------------------------------------------------
                                    202 ; special function bits
                                    203 ;--------------------------------------------------------
                                    204 	.area RSEG    (ABS,DATA)
      000000                        205 	.org 0x0000
                           000080   206 G$P0_0$0$0 == 0x0080
                           000080   207 _P0_0	=	0x0080
                           000081   208 G$P0_1$0$0 == 0x0081
                           000081   209 _P0_1	=	0x0081
                           000082   210 G$P0_2$0$0 == 0x0082
                           000082   211 _P0_2	=	0x0082
                           000083   212 G$P0_3$0$0 == 0x0083
                           000083   213 _P0_3	=	0x0083
                           000084   214 G$P0_4$0$0 == 0x0084
                           000084   215 _P0_4	=	0x0084
                           000085   216 G$P0_5$0$0 == 0x0085
                           000085   217 _P0_5	=	0x0085
                           000086   218 G$P0_6$0$0 == 0x0086
                           000086   219 _P0_6	=	0x0086
                           000087   220 G$P0_7$0$0 == 0x0087
                           000087   221 _P0_7	=	0x0087
                           000088   222 G$IT0$0$0 == 0x0088
                           000088   223 _IT0	=	0x0088
                           000089   224 G$IE0$0$0 == 0x0089
                           000089   225 _IE0	=	0x0089
                           00008A   226 G$IT1$0$0 == 0x008a
                           00008A   227 _IT1	=	0x008a
                           00008B   228 G$IE1$0$0 == 0x008b
                           00008B   229 _IE1	=	0x008b
                           00008C   230 G$TR0$0$0 == 0x008c
                           00008C   231 _TR0	=	0x008c
                           00008D   232 G$TF0$0$0 == 0x008d
                           00008D   233 _TF0	=	0x008d
                           00008E   234 G$TR1$0$0 == 0x008e
                           00008E   235 _TR1	=	0x008e
                           00008F   236 G$TF1$0$0 == 0x008f
                           00008F   237 _TF1	=	0x008f
                           000090   238 G$P1_0$0$0 == 0x0090
                           000090   239 _P1_0	=	0x0090
                           000091   240 G$P1_1$0$0 == 0x0091
                           000091   241 _P1_1	=	0x0091
                           000092   242 G$P1_2$0$0 == 0x0092
                           000092   243 _P1_2	=	0x0092
                           000093   244 G$P1_3$0$0 == 0x0093
                           000093   245 _P1_3	=	0x0093
                           000094   246 G$P1_4$0$0 == 0x0094
                           000094   247 _P1_4	=	0x0094
                           000095   248 G$P1_5$0$0 == 0x0095
                           000095   249 _P1_5	=	0x0095
                           000096   250 G$P1_6$0$0 == 0x0096
                           000096   251 _P1_6	=	0x0096
                           000097   252 G$P1_7$0$0 == 0x0097
                           000097   253 _P1_7	=	0x0097
                           000090   254 G$T2$0$0 == 0x0090
                           000090   255 _T2	=	0x0090
                           000091   256 G$T2EX$0$0 == 0x0091
                           000091   257 _T2EX	=	0x0091
                           000098   258 G$RI$0$0 == 0x0098
                           000098   259 _RI	=	0x0098
                           000099   260 G$TI$0$0 == 0x0099
                           000099   261 _TI	=	0x0099
                           00009A   262 G$RB8$0$0 == 0x009a
                           00009A   263 _RB8	=	0x009a
                           00009B   264 G$TB8$0$0 == 0x009b
                           00009B   265 _TB8	=	0x009b
                           00009C   266 G$REN$0$0 == 0x009c
                           00009C   267 _REN	=	0x009c
                           00009D   268 G$SM2$0$0 == 0x009d
                           00009D   269 _SM2	=	0x009d
                           00009E   270 G$SM1$0$0 == 0x009e
                           00009E   271 _SM1	=	0x009e
                           00009F   272 G$SM0$0$0 == 0x009f
                           00009F   273 _SM0	=	0x009f
                           0000A0   274 G$P2_0$0$0 == 0x00a0
                           0000A0   275 _P2_0	=	0x00a0
                           0000A1   276 G$P2_1$0$0 == 0x00a1
                           0000A1   277 _P2_1	=	0x00a1
                           0000A2   278 G$P2_2$0$0 == 0x00a2
                           0000A2   279 _P2_2	=	0x00a2
                           0000A3   280 G$P2_3$0$0 == 0x00a3
                           0000A3   281 _P2_3	=	0x00a3
                           0000A4   282 G$P2_4$0$0 == 0x00a4
                           0000A4   283 _P2_4	=	0x00a4
                           0000A5   284 G$P2_5$0$0 == 0x00a5
                           0000A5   285 _P2_5	=	0x00a5
                           0000A6   286 G$P2_6$0$0 == 0x00a6
                           0000A6   287 _P2_6	=	0x00a6
                           0000A7   288 G$P2_7$0$0 == 0x00a7
                           0000A7   289 _P2_7	=	0x00a7
                           0000A8   290 G$EX0$0$0 == 0x00a8
                           0000A8   291 _EX0	=	0x00a8
                           0000A9   292 G$ET0$0$0 == 0x00a9
                           0000A9   293 _ET0	=	0x00a9
                           0000AA   294 G$EX1$0$0 == 0x00aa
                           0000AA   295 _EX1	=	0x00aa
                           0000AB   296 G$ET1$0$0 == 0x00ab
                           0000AB   297 _ET1	=	0x00ab
                           0000AC   298 G$ES$0$0 == 0x00ac
                           0000AC   299 _ES	=	0x00ac
                           0000AD   300 G$ET2$0$0 == 0x00ad
                           0000AD   301 _ET2	=	0x00ad
                           0000AF   302 G$EA$0$0 == 0x00af
                           0000AF   303 _EA	=	0x00af
                           0000B0   304 G$P3_0$0$0 == 0x00b0
                           0000B0   305 _P3_0	=	0x00b0
                           0000B1   306 G$P3_1$0$0 == 0x00b1
                           0000B1   307 _P3_1	=	0x00b1
                           0000B2   308 G$P3_2$0$0 == 0x00b2
                           0000B2   309 _P3_2	=	0x00b2
                           0000B3   310 G$P3_3$0$0 == 0x00b3
                           0000B3   311 _P3_3	=	0x00b3
                           0000B4   312 G$P3_4$0$0 == 0x00b4
                           0000B4   313 _P3_4	=	0x00b4
                           0000B5   314 G$P3_5$0$0 == 0x00b5
                           0000B5   315 _P3_5	=	0x00b5
                           0000B6   316 G$P3_6$0$0 == 0x00b6
                           0000B6   317 _P3_6	=	0x00b6
                           0000B7   318 G$P3_7$0$0 == 0x00b7
                           0000B7   319 _P3_7	=	0x00b7
                           0000B0   320 G$RXD$0$0 == 0x00b0
                           0000B0   321 _RXD	=	0x00b0
                           0000B1   322 G$TXD$0$0 == 0x00b1
                           0000B1   323 _TXD	=	0x00b1
                           0000B2   324 G$INT0$0$0 == 0x00b2
                           0000B2   325 _INT0	=	0x00b2
                           0000B3   326 G$INT1$0$0 == 0x00b3
                           0000B3   327 _INT1	=	0x00b3
                           0000B4   328 G$T0$0$0 == 0x00b4
                           0000B4   329 _T0	=	0x00b4
                           0000B5   330 G$T1$0$0 == 0x00b5
                           0000B5   331 _T1	=	0x00b5
                           0000B6   332 G$WR$0$0 == 0x00b6
                           0000B6   333 _WR	=	0x00b6
                           0000B7   334 G$RD$0$0 == 0x00b7
                           0000B7   335 _RD	=	0x00b7
                           0000B8   336 G$PX0$0$0 == 0x00b8
                           0000B8   337 _PX0	=	0x00b8
                           0000B9   338 G$PT0$0$0 == 0x00b9
                           0000B9   339 _PT0	=	0x00b9
                           0000BA   340 G$PX1$0$0 == 0x00ba
                           0000BA   341 _PX1	=	0x00ba
                           0000BB   342 G$PT1$0$0 == 0x00bb
                           0000BB   343 _PT1	=	0x00bb
                           0000BC   344 G$PS$0$0 == 0x00bc
                           0000BC   345 _PS	=	0x00bc
                           0000BD   346 G$PT2$0$0 == 0x00bd
                           0000BD   347 _PT2	=	0x00bd
                           0000C8   348 G$T2CON_0$0$0 == 0x00c8
                           0000C8   349 _T2CON_0	=	0x00c8
                           0000C9   350 G$T2CON_1$0$0 == 0x00c9
                           0000C9   351 _T2CON_1	=	0x00c9
                           0000CA   352 G$T2CON_2$0$0 == 0x00ca
                           0000CA   353 _T2CON_2	=	0x00ca
                           0000CB   354 G$T2CON_3$0$0 == 0x00cb
                           0000CB   355 _T2CON_3	=	0x00cb
                           0000CC   356 G$T2CON_4$0$0 == 0x00cc
                           0000CC   357 _T2CON_4	=	0x00cc
                           0000CD   358 G$T2CON_5$0$0 == 0x00cd
                           0000CD   359 _T2CON_5	=	0x00cd
                           0000CE   360 G$T2CON_6$0$0 == 0x00ce
                           0000CE   361 _T2CON_6	=	0x00ce
                           0000CF   362 G$T2CON_7$0$0 == 0x00cf
                           0000CF   363 _T2CON_7	=	0x00cf
                           0000C8   364 G$CP_RL2$0$0 == 0x00c8
                           0000C8   365 _CP_RL2	=	0x00c8
                           0000C9   366 G$C_T2$0$0 == 0x00c9
                           0000C9   367 _C_T2	=	0x00c9
                           0000CA   368 G$TR2$0$0 == 0x00ca
                           0000CA   369 _TR2	=	0x00ca
                           0000CB   370 G$EXEN2$0$0 == 0x00cb
                           0000CB   371 _EXEN2	=	0x00cb
                           0000CC   372 G$TCLK$0$0 == 0x00cc
                           0000CC   373 _TCLK	=	0x00cc
                           0000CD   374 G$RCLK$0$0 == 0x00cd
                           0000CD   375 _RCLK	=	0x00cd
                           0000CE   376 G$EXF2$0$0 == 0x00ce
                           0000CE   377 _EXF2	=	0x00ce
                           0000CF   378 G$TF2$0$0 == 0x00cf
                           0000CF   379 _TF2	=	0x00cf
                           0000D0   380 G$P$0$0 == 0x00d0
                           0000D0   381 _P	=	0x00d0
                           0000D1   382 G$FL$0$0 == 0x00d1
                           0000D1   383 _FL	=	0x00d1
                           0000D2   384 G$OV$0$0 == 0x00d2
                           0000D2   385 _OV	=	0x00d2
                           0000D3   386 G$RS0$0$0 == 0x00d3
                           0000D3   387 _RS0	=	0x00d3
                           0000D4   388 G$RS1$0$0 == 0x00d4
                           0000D4   389 _RS1	=	0x00d4
                           0000D5   390 G$F0$0$0 == 0x00d5
                           0000D5   391 _F0	=	0x00d5
                           0000D6   392 G$AC$0$0 == 0x00d6
                           0000D6   393 _AC	=	0x00d6
                           0000D7   394 G$CY$0$0 == 0x00d7
                           0000D7   395 _CY	=	0x00d7
                                    396 ;--------------------------------------------------------
                                    397 ; overlayable register banks
                                    398 ;--------------------------------------------------------
                                    399 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        400 	.ds 8
                                    401 ;--------------------------------------------------------
                                    402 ; internal ram data
                                    403 ;--------------------------------------------------------
                                    404 	.area DSEG    (DATA)
                                    405 ;--------------------------------------------------------
                                    406 ; overlayable items in internal ram 
                                    407 ;--------------------------------------------------------
                                    408 ;--------------------------------------------------------
                                    409 ; Stack segment in internal ram 
                                    410 ;--------------------------------------------------------
                                    411 	.area	SSEG
      00000A                        412 __start__stack:
      00000A                        413 	.ds	1
                                    414 
                                    415 ;--------------------------------------------------------
                                    416 ; indirectly addressable internal ram data
                                    417 ;--------------------------------------------------------
                                    418 	.area ISEG    (DATA)
                                    419 ;--------------------------------------------------------
                                    420 ; absolute internal ram data
                                    421 ;--------------------------------------------------------
                                    422 	.area IABS    (ABS,DATA)
                                    423 	.area IABS    (ABS,DATA)
                                    424 ;--------------------------------------------------------
                                    425 ; bit data
                                    426 ;--------------------------------------------------------
                                    427 	.area BSEG    (BIT)
                                    428 ;--------------------------------------------------------
                                    429 ; paged external ram data
                                    430 ;--------------------------------------------------------
                                    431 	.area PSEG    (PAG,XDATA)
                                    432 ;--------------------------------------------------------
                                    433 ; external ram data
                                    434 ;--------------------------------------------------------
                                    435 	.area XSEG    (XDATA)
                                    436 ;--------------------------------------------------------
                                    437 ; absolute external ram data
                                    438 ;--------------------------------------------------------
                                    439 	.area XABS    (ABS,XDATA)
                                    440 ;--------------------------------------------------------
                                    441 ; external initialized ram data
                                    442 ;--------------------------------------------------------
                                    443 	.area XISEG   (XDATA)
                                    444 	.area HOME    (CODE)
                                    445 	.area GSINIT0 (CODE)
                                    446 	.area GSINIT1 (CODE)
                                    447 	.area GSINIT2 (CODE)
                                    448 	.area GSINIT3 (CODE)
                                    449 	.area GSINIT4 (CODE)
                                    450 	.area GSINIT5 (CODE)
                                    451 	.area GSINIT  (CODE)
                                    452 	.area GSFINAL (CODE)
                                    453 	.area CSEG    (CODE)
                                    454 ;--------------------------------------------------------
                                    455 ; interrupt vector 
                                    456 ;--------------------------------------------------------
                                    457 	.area HOME    (CODE)
      000000                        458 __interrupt_vect:
      000000 02 00 06         [24]  459 	ljmp	__sdcc_gsinit_startup
                                    460 ;--------------------------------------------------------
                                    461 ; global & static initialisations
                                    462 ;--------------------------------------------------------
                                    463 	.area HOME    (CODE)
                                    464 	.area GSINIT  (CODE)
                                    465 	.area GSFINAL (CODE)
                                    466 	.area GSINIT  (CODE)
                                    467 	.globl __sdcc_gsinit_startup
                                    468 	.globl __sdcc_program_startup
                                    469 	.globl __start__stack
                                    470 	.globl __mcs51_genXINIT
                                    471 	.globl __mcs51_genXRAMCLEAR
                                    472 	.globl __mcs51_genRAMCLEAR
                                    473 	.area GSFINAL (CODE)
      00005F 02 00 03         [24]  474 	ljmp	__sdcc_program_startup
                                    475 ;--------------------------------------------------------
                                    476 ; Home
                                    477 ;--------------------------------------------------------
                                    478 	.area HOME    (CODE)
                                    479 	.area HOME    (CODE)
      000003                        480 __sdcc_program_startup:
      000003 02 01 A1         [24]  481 	ljmp	_main
                                    482 ;	return from main will return to caller
                                    483 ;--------------------------------------------------------
                                    484 ; code
                                    485 ;--------------------------------------------------------
                                    486 	.area CSEG    (CODE)
                                    487 ;------------------------------------------------------------
                                    488 ;Allocation info for local variables in function 't0Delay'
                                    489 ;------------------------------------------------------------
                           000000   490 	G$t0Delay$0$0 ==.
                           000000   491 	C$asgn2_2.c$4$0$0 ==.
                                    492 ;	asgn2_2.c:4: void t0Delay()
                                    493 ;	-----------------------------------------
                                    494 ;	 function t0Delay
                                    495 ;	-----------------------------------------
      000062                        496 _t0Delay:
                           000007   497 	ar7 = 0x07
                           000006   498 	ar6 = 0x06
                           000005   499 	ar5 = 0x05
                           000004   500 	ar4 = 0x04
                           000003   501 	ar3 = 0x03
                           000002   502 	ar2 = 0x02
                           000001   503 	ar1 = 0x01
                           000000   504 	ar0 = 0x00
                           000000   505 	C$asgn2_2.c$6$1$1 ==.
                                    506 ;	asgn2_2.c:6: TMOD=0x01;
      000062 75 89 01         [24]  507 	mov	_TMOD,#0x01
                           000003   508 	C$asgn2_2.c$7$1$1 ==.
                                    509 ;	asgn2_2.c:7: TL0=0x00;
      000065 75 8A 00         [24]  510 	mov	_TL0,#0x00
                           000006   511 	C$asgn2_2.c$8$1$1 ==.
                                    512 ;	asgn2_2.c:8: TH0=0xE5;
      000068 75 8C E5         [24]  513 	mov	_TH0,#0xE5
                           000009   514 	C$asgn2_2.c$9$1$1 ==.
                                    515 ;	asgn2_2.c:9: TR0=1;
      00006B D2 8C            [12]  516 	setb	_TR0
                           00000B   517 	C$asgn2_2.c$10$1$1 ==.
                                    518 ;	asgn2_2.c:10: while(	TF0==0 );
      00006D                        519 00101$:
      00006D 30 8D FD         [24]  520 	jnb	_TF0,00101$
                           00000E   521 	C$asgn2_2.c$11$1$1 ==.
                                    522 ;	asgn2_2.c:11: TR0=0;
      000070 C2 8C            [12]  523 	clr	_TR0
                           000010   524 	C$asgn2_2.c$12$1$1 ==.
                                    525 ;	asgn2_2.c:12: TF0=0;
      000072 C2 8D            [12]  526 	clr	_TF0
                           000012   527 	C$asgn2_2.c$13$1$1 ==.
                           000012   528 	XG$t0Delay$0$0 ==.
      000074 22               [24]  529 	ret
                                    530 ;------------------------------------------------------------
                                    531 ;Allocation info for local variables in function 'setSegment'
                                    532 ;------------------------------------------------------------
                                    533 ;x                         Allocated to registers r6 r7 
                                    534 ;------------------------------------------------------------
                           000013   535 	G$setSegment$0$0 ==.
                           000013   536 	C$asgn2_2.c$16$1$1 ==.
                                    537 ;	asgn2_2.c:16: void setSegment(int x)
                                    538 ;	-----------------------------------------
                                    539 ;	 function setSegment
                                    540 ;	-----------------------------------------
      000075                        541 _setSegment:
      000075 AE 82            [24]  542 	mov	r6,dpl
      000077 AF 83            [24]  543 	mov	r7,dph
                           000017   544 	C$asgn2_2.c$18$1$3 ==.
                                    545 ;	asgn2_2.c:18: if(x==0)
      000079 EE               [12]  546 	mov	a,r6
      00007A 4F               [12]  547 	orl	a,r7
      00007B 70 11            [24]  548 	jnz	00128$
                           00001B   549 	C$asgn2_2.c$20$2$4 ==.
                                    550 ;	asgn2_2.c:20: P0_0=0;
      00007D C2 80            [12]  551 	clr	_P0_0
                           00001D   552 	C$asgn2_2.c$21$2$4 ==.
                                    553 ;	asgn2_2.c:21: P0_1=0;
      00007F C2 81            [12]  554 	clr	_P0_1
                           00001F   555 	C$asgn2_2.c$22$2$4 ==.
                                    556 ;	asgn2_2.c:22: P0_2=0;
      000081 C2 82            [12]  557 	clr	_P0_2
                           000021   558 	C$asgn2_2.c$23$2$4 ==.
                                    559 ;	asgn2_2.c:23: P0_3=0;
      000083 C2 83            [12]  560 	clr	_P0_3
                           000023   561 	C$asgn2_2.c$24$2$4 ==.
                                    562 ;	asgn2_2.c:24: P0_4=0;
      000085 C2 84            [12]  563 	clr	_P0_4
                           000025   564 	C$asgn2_2.c$25$2$4 ==.
                                    565 ;	asgn2_2.c:25: P0_5=0;
      000087 C2 85            [12]  566 	clr	_P0_5
                           000027   567 	C$asgn2_2.c$26$2$4 ==.
                                    568 ;	asgn2_2.c:26: P0_6=1;
      000089 D2 86            [12]  569 	setb	_P0_6
      00008B 02 01 56         [24]  570 	ljmp	00130$
      00008E                        571 00128$:
                           00002C   572 	C$asgn2_2.c$28$1$3 ==.
                                    573 ;	asgn2_2.c:28: else if(x==1)
      00008E BE 01 14         [24]  574 	cjne	r6,#0x01,00125$
      000091 BF 00 11         [24]  575 	cjne	r7,#0x00,00125$
                           000032   576 	C$asgn2_2.c$30$2$5 ==.
                                    577 ;	asgn2_2.c:30: P0_0=1;
      000094 D2 80            [12]  578 	setb	_P0_0
                           000034   579 	C$asgn2_2.c$31$2$5 ==.
                                    580 ;	asgn2_2.c:31: P0_1=0;
      000096 C2 81            [12]  581 	clr	_P0_1
                           000036   582 	C$asgn2_2.c$32$2$5 ==.
                                    583 ;	asgn2_2.c:32: P0_2=0;
      000098 C2 82            [12]  584 	clr	_P0_2
                           000038   585 	C$asgn2_2.c$33$2$5 ==.
                                    586 ;	asgn2_2.c:33: P0_3=1;
      00009A D2 83            [12]  587 	setb	_P0_3
                           00003A   588 	C$asgn2_2.c$34$2$5 ==.
                                    589 ;	asgn2_2.c:34: P0_4=1;
      00009C D2 84            [12]  590 	setb	_P0_4
                           00003C   591 	C$asgn2_2.c$35$2$5 ==.
                                    592 ;	asgn2_2.c:35: P0_5=1;
      00009E D2 85            [12]  593 	setb	_P0_5
                           00003E   594 	C$asgn2_2.c$36$2$5 ==.
                                    595 ;	asgn2_2.c:36: P0_6=1;
      0000A0 D2 86            [12]  596 	setb	_P0_6
      0000A2 02 01 56         [24]  597 	ljmp	00130$
      0000A5                        598 00125$:
                           000043   599 	C$asgn2_2.c$38$1$3 ==.
                                    600 ;	asgn2_2.c:38: else if(x==2)
      0000A5 BE 02 14         [24]  601 	cjne	r6,#0x02,00122$
      0000A8 BF 00 11         [24]  602 	cjne	r7,#0x00,00122$
                           000049   603 	C$asgn2_2.c$40$2$6 ==.
                                    604 ;	asgn2_2.c:40: P0_0=0;
      0000AB C2 80            [12]  605 	clr	_P0_0
                           00004B   606 	C$asgn2_2.c$41$2$6 ==.
                                    607 ;	asgn2_2.c:41: P0_1=0;
      0000AD C2 81            [12]  608 	clr	_P0_1
                           00004D   609 	C$asgn2_2.c$42$2$6 ==.
                                    610 ;	asgn2_2.c:42: P0_2=1;
      0000AF D2 82            [12]  611 	setb	_P0_2
                           00004F   612 	C$asgn2_2.c$43$2$6 ==.
                                    613 ;	asgn2_2.c:43: P0_3=0;
      0000B1 C2 83            [12]  614 	clr	_P0_3
                           000051   615 	C$asgn2_2.c$44$2$6 ==.
                                    616 ;	asgn2_2.c:44: P0_4=0;
      0000B3 C2 84            [12]  617 	clr	_P0_4
                           000053   618 	C$asgn2_2.c$45$2$6 ==.
                                    619 ;	asgn2_2.c:45: P0_5=1;
      0000B5 D2 85            [12]  620 	setb	_P0_5
                           000055   621 	C$asgn2_2.c$46$2$6 ==.
                                    622 ;	asgn2_2.c:46: P0_6=0;
      0000B7 C2 86            [12]  623 	clr	_P0_6
      0000B9 02 01 56         [24]  624 	ljmp	00130$
      0000BC                        625 00122$:
                           00005A   626 	C$asgn2_2.c$48$1$3 ==.
                                    627 ;	asgn2_2.c:48: else if(x==3)
      0000BC BE 03 14         [24]  628 	cjne	r6,#0x03,00119$
      0000BF BF 00 11         [24]  629 	cjne	r7,#0x00,00119$
                           000060   630 	C$asgn2_2.c$50$2$7 ==.
                                    631 ;	asgn2_2.c:50: P0_0=0;
      0000C2 C2 80            [12]  632 	clr	_P0_0
                           000062   633 	C$asgn2_2.c$51$2$7 ==.
                                    634 ;	asgn2_2.c:51: P0_1=0;
      0000C4 C2 81            [12]  635 	clr	_P0_1
                           000064   636 	C$asgn2_2.c$52$2$7 ==.
                                    637 ;	asgn2_2.c:52: P0_2=0;
      0000C6 C2 82            [12]  638 	clr	_P0_2
                           000066   639 	C$asgn2_2.c$53$2$7 ==.
                                    640 ;	asgn2_2.c:53: P0_3=0;
      0000C8 C2 83            [12]  641 	clr	_P0_3
                           000068   642 	C$asgn2_2.c$54$2$7 ==.
                                    643 ;	asgn2_2.c:54: P0_4=1;
      0000CA D2 84            [12]  644 	setb	_P0_4
                           00006A   645 	C$asgn2_2.c$55$2$7 ==.
                                    646 ;	asgn2_2.c:55: P0_5=1;
      0000CC D2 85            [12]  647 	setb	_P0_5
                           00006C   648 	C$asgn2_2.c$56$2$7 ==.
                                    649 ;	asgn2_2.c:56: P0_6=0;
      0000CE C2 86            [12]  650 	clr	_P0_6
      0000D0 02 01 56         [24]  651 	ljmp	00130$
      0000D3                        652 00119$:
                           000071   653 	C$asgn2_2.c$58$1$3 ==.
                                    654 ;	asgn2_2.c:58: else if(x==4)
      0000D3 BE 04 14         [24]  655 	cjne	r6,#0x04,00116$
      0000D6 BF 00 11         [24]  656 	cjne	r7,#0x00,00116$
                           000077   657 	C$asgn2_2.c$60$2$8 ==.
                                    658 ;	asgn2_2.c:60: P0_0=1;
      0000D9 D2 80            [12]  659 	setb	_P0_0
                           000079   660 	C$asgn2_2.c$61$2$8 ==.
                                    661 ;	asgn2_2.c:61: P0_1=0;
      0000DB C2 81            [12]  662 	clr	_P0_1
                           00007B   663 	C$asgn2_2.c$62$2$8 ==.
                                    664 ;	asgn2_2.c:62: P0_2=0;
      0000DD C2 82            [12]  665 	clr	_P0_2
                           00007D   666 	C$asgn2_2.c$63$2$8 ==.
                                    667 ;	asgn2_2.c:63: P0_3=1;
      0000DF D2 83            [12]  668 	setb	_P0_3
                           00007F   669 	C$asgn2_2.c$64$2$8 ==.
                                    670 ;	asgn2_2.c:64: P0_4=1;
      0000E1 D2 84            [12]  671 	setb	_P0_4
                           000081   672 	C$asgn2_2.c$65$2$8 ==.
                                    673 ;	asgn2_2.c:65: P0_5=0;
      0000E3 C2 85            [12]  674 	clr	_P0_5
                           000083   675 	C$asgn2_2.c$66$2$8 ==.
                                    676 ;	asgn2_2.c:66: P0_6=0;
      0000E5 C2 86            [12]  677 	clr	_P0_6
      0000E7 02 01 56         [24]  678 	ljmp	00130$
      0000EA                        679 00116$:
                           000088   680 	C$asgn2_2.c$68$1$3 ==.
                                    681 ;	asgn2_2.c:68: else if(x==5)
      0000EA BE 05 13         [24]  682 	cjne	r6,#0x05,00113$
      0000ED BF 00 10         [24]  683 	cjne	r7,#0x00,00113$
                           00008E   684 	C$asgn2_2.c$70$2$9 ==.
                                    685 ;	asgn2_2.c:70: P0_0=0;
      0000F0 C2 80            [12]  686 	clr	_P0_0
                           000090   687 	C$asgn2_2.c$71$2$9 ==.
                                    688 ;	asgn2_2.c:71: P0_1=1;
      0000F2 D2 81            [12]  689 	setb	_P0_1
                           000092   690 	C$asgn2_2.c$72$2$9 ==.
                                    691 ;	asgn2_2.c:72: P0_2=0;
      0000F4 C2 82            [12]  692 	clr	_P0_2
                           000094   693 	C$asgn2_2.c$73$2$9 ==.
                                    694 ;	asgn2_2.c:73: P0_3=0;
      0000F6 C2 83            [12]  695 	clr	_P0_3
                           000096   696 	C$asgn2_2.c$74$2$9 ==.
                                    697 ;	asgn2_2.c:74: P0_4=1;
      0000F8 D2 84            [12]  698 	setb	_P0_4
                           000098   699 	C$asgn2_2.c$75$2$9 ==.
                                    700 ;	asgn2_2.c:75: P0_5=0;
      0000FA C2 85            [12]  701 	clr	_P0_5
                           00009A   702 	C$asgn2_2.c$76$2$9 ==.
                                    703 ;	asgn2_2.c:76: P0_6=0;
      0000FC C2 86            [12]  704 	clr	_P0_6
      0000FE 80 56            [24]  705 	sjmp	00130$
      000100                        706 00113$:
                           00009E   707 	C$asgn2_2.c$78$1$3 ==.
                                    708 ;	asgn2_2.c:78: else if(x==6)
      000100 BE 06 13         [24]  709 	cjne	r6,#0x06,00110$
      000103 BF 00 10         [24]  710 	cjne	r7,#0x00,00110$
                           0000A4   711 	C$asgn2_2.c$80$2$10 ==.
                                    712 ;	asgn2_2.c:80: P0_0=0;
      000106 C2 80            [12]  713 	clr	_P0_0
                           0000A6   714 	C$asgn2_2.c$81$2$10 ==.
                                    715 ;	asgn2_2.c:81: P0_1=1;
      000108 D2 81            [12]  716 	setb	_P0_1
                           0000A8   717 	C$asgn2_2.c$82$2$10 ==.
                                    718 ;	asgn2_2.c:82: P0_2=0;
      00010A C2 82            [12]  719 	clr	_P0_2
                           0000AA   720 	C$asgn2_2.c$83$2$10 ==.
                                    721 ;	asgn2_2.c:83: P0_3=0;
      00010C C2 83            [12]  722 	clr	_P0_3
                           0000AC   723 	C$asgn2_2.c$84$2$10 ==.
                                    724 ;	asgn2_2.c:84: P0_4=0;
      00010E C2 84            [12]  725 	clr	_P0_4
                           0000AE   726 	C$asgn2_2.c$85$2$10 ==.
                                    727 ;	asgn2_2.c:85: P0_5=0;
      000110 C2 85            [12]  728 	clr	_P0_5
                           0000B0   729 	C$asgn2_2.c$86$2$10 ==.
                                    730 ;	asgn2_2.c:86: P0_6=0;
      000112 C2 86            [12]  731 	clr	_P0_6
      000114 80 40            [24]  732 	sjmp	00130$
      000116                        733 00110$:
                           0000B4   734 	C$asgn2_2.c$88$1$3 ==.
                                    735 ;	asgn2_2.c:88: else if(x==7)
      000116 BE 07 13         [24]  736 	cjne	r6,#0x07,00107$
      000119 BF 00 10         [24]  737 	cjne	r7,#0x00,00107$
                           0000BA   738 	C$asgn2_2.c$90$2$11 ==.
                                    739 ;	asgn2_2.c:90: P0_0=0;
      00011C C2 80            [12]  740 	clr	_P0_0
                           0000BC   741 	C$asgn2_2.c$91$2$11 ==.
                                    742 ;	asgn2_2.c:91: P0_1=0;
      00011E C2 81            [12]  743 	clr	_P0_1
                           0000BE   744 	C$asgn2_2.c$92$2$11 ==.
                                    745 ;	asgn2_2.c:92: P0_2=0;
      000120 C2 82            [12]  746 	clr	_P0_2
                           0000C0   747 	C$asgn2_2.c$93$2$11 ==.
                                    748 ;	asgn2_2.c:93: P0_3=1;
      000122 D2 83            [12]  749 	setb	_P0_3
                           0000C2   750 	C$asgn2_2.c$94$2$11 ==.
                                    751 ;	asgn2_2.c:94: P0_4=1;
      000124 D2 84            [12]  752 	setb	_P0_4
                           0000C4   753 	C$asgn2_2.c$95$2$11 ==.
                                    754 ;	asgn2_2.c:95: P0_5=1;
      000126 D2 85            [12]  755 	setb	_P0_5
                           0000C6   756 	C$asgn2_2.c$96$2$11 ==.
                                    757 ;	asgn2_2.c:96: P0_6=1;
      000128 D2 86            [12]  758 	setb	_P0_6
      00012A 80 2A            [24]  759 	sjmp	00130$
      00012C                        760 00107$:
                           0000CA   761 	C$asgn2_2.c$98$1$3 ==.
                                    762 ;	asgn2_2.c:98: else if(x==8)
      00012C BE 08 13         [24]  763 	cjne	r6,#0x08,00104$
      00012F BF 00 10         [24]  764 	cjne	r7,#0x00,00104$
                           0000D0   765 	C$asgn2_2.c$100$2$12 ==.
                                    766 ;	asgn2_2.c:100: P0_0=0;
      000132 C2 80            [12]  767 	clr	_P0_0
                           0000D2   768 	C$asgn2_2.c$101$2$12 ==.
                                    769 ;	asgn2_2.c:101: P0_1=0;
      000134 C2 81            [12]  770 	clr	_P0_1
                           0000D4   771 	C$asgn2_2.c$102$2$12 ==.
                                    772 ;	asgn2_2.c:102: P0_2=0;
      000136 C2 82            [12]  773 	clr	_P0_2
                           0000D6   774 	C$asgn2_2.c$103$2$12 ==.
                                    775 ;	asgn2_2.c:103: P0_3=0;
      000138 C2 83            [12]  776 	clr	_P0_3
                           0000D8   777 	C$asgn2_2.c$104$2$12 ==.
                                    778 ;	asgn2_2.c:104: P0_4=0;
      00013A C2 84            [12]  779 	clr	_P0_4
                           0000DA   780 	C$asgn2_2.c$105$2$12 ==.
                                    781 ;	asgn2_2.c:105: P0_5=0;
      00013C C2 85            [12]  782 	clr	_P0_5
                           0000DC   783 	C$asgn2_2.c$106$2$12 ==.
                                    784 ;	asgn2_2.c:106: P0_6=0;
      00013E C2 86            [12]  785 	clr	_P0_6
      000140 80 14            [24]  786 	sjmp	00130$
      000142                        787 00104$:
                           0000E0   788 	C$asgn2_2.c$108$1$3 ==.
                                    789 ;	asgn2_2.c:108: else if(x==9)
      000142 BE 09 11         [24]  790 	cjne	r6,#0x09,00130$
      000145 BF 00 0E         [24]  791 	cjne	r7,#0x00,00130$
                           0000E6   792 	C$asgn2_2.c$110$2$13 ==.
                                    793 ;	asgn2_2.c:110: P0_0=0;
      000148 C2 80            [12]  794 	clr	_P0_0
                           0000E8   795 	C$asgn2_2.c$111$2$13 ==.
                                    796 ;	asgn2_2.c:111: P0_1=0;
      00014A C2 81            [12]  797 	clr	_P0_1
                           0000EA   798 	C$asgn2_2.c$112$2$13 ==.
                                    799 ;	asgn2_2.c:112: P0_2=0;
      00014C C2 82            [12]  800 	clr	_P0_2
                           0000EC   801 	C$asgn2_2.c$113$2$13 ==.
                                    802 ;	asgn2_2.c:113: P0_3=0;
      00014E C2 83            [12]  803 	clr	_P0_3
                           0000EE   804 	C$asgn2_2.c$114$2$13 ==.
                                    805 ;	asgn2_2.c:114: P0_4=1;
      000150 D2 84            [12]  806 	setb	_P0_4
                           0000F0   807 	C$asgn2_2.c$115$2$13 ==.
                                    808 ;	asgn2_2.c:115: P0_5=0;
      000152 C2 85            [12]  809 	clr	_P0_5
                           0000F2   810 	C$asgn2_2.c$116$2$13 ==.
                                    811 ;	asgn2_2.c:116: P0_6=0;
      000154 C2 86            [12]  812 	clr	_P0_6
      000156                        813 00130$:
                           0000F4   814 	C$asgn2_2.c$118$1$3 ==.
                           0000F4   815 	XG$setSegment$0$0 ==.
      000156 22               [24]  816 	ret
                                    817 ;------------------------------------------------------------
                                    818 ;Allocation info for local variables in function 'display'
                                    819 ;------------------------------------------------------------
                                    820 ;x                         Allocated to registers r6 r7 
                                    821 ;unitDigit                 Allocated to registers 
                                    822 ;tensDigit                 Allocated to registers 
                                    823 ;------------------------------------------------------------
                           0000F5   824 	G$display$0$0 ==.
                           0000F5   825 	C$asgn2_2.c$120$1$3 ==.
                                    826 ;	asgn2_2.c:120: void display(int x){
                                    827 ;	-----------------------------------------
                                    828 ;	 function display
                                    829 ;	-----------------------------------------
      000157                        830 _display:
                           0000F5   831 	C$asgn2_2.c$123$1$15 ==.
                                    832 ;	asgn2_2.c:123: unitDigit=x%10;
      000157 AE 82            [24]  833 	mov	r6,dpl
      000159 AF 83            [24]  834 	mov	r7,dph
      00015B 75 08 0A         [24]  835 	mov	__modsint_PARM_2,#0x0A
      00015E 75 09 00         [24]  836 	mov	(__modsint_PARM_2 + 1),#0x00
      000161 C0 07            [24]  837 	push	ar7
      000163 C0 06            [24]  838 	push	ar6
      000165 12 02 64         [24]  839 	lcall	__modsint
                           000106   840 	C$asgn2_2.c$124$1$15 ==.
                                    841 ;	asgn2_2.c:124: setSegment(unitDigit);
      000168 12 00 75         [24]  842 	lcall	_setSegment
                           000109   843 	C$asgn2_2.c$125$1$15 ==.
                                    844 ;	asgn2_2.c:125: P1_1=1;
      00016B D2 91            [12]  845 	setb	_P1_1
                           00010B   846 	C$asgn2_2.c$126$1$15 ==.
                                    847 ;	asgn2_2.c:126: P1_0=0;
      00016D C2 90            [12]  848 	clr	_P1_0
                           00010D   849 	C$asgn2_2.c$127$1$15 ==.
                                    850 ;	asgn2_2.c:127: t0Delay();
      00016F 12 00 62         [24]  851 	lcall	_t0Delay
      000172 D0 06            [24]  852 	pop	ar6
      000174 D0 07            [24]  853 	pop	ar7
                           000114   854 	C$asgn2_2.c$128$1$15 ==.
                                    855 ;	asgn2_2.c:128: tensDigit=x/10;
      000176 75 08 0A         [24]  856 	mov	__divsint_PARM_2,#0x0A
      000179 75 09 00         [24]  857 	mov	(__divsint_PARM_2 + 1),#0x00
      00017C 8E 82            [24]  858 	mov	dpl,r6
      00017E 8F 83            [24]  859 	mov	dph,r7
      000180 12 02 9A         [24]  860 	lcall	__divsint
                           000121   861 	C$asgn2_2.c$129$1$15 ==.
                                    862 ;	asgn2_2.c:129: setSegment(tensDigit);
      000183 12 00 75         [24]  863 	lcall	_setSegment
                           000124   864 	C$asgn2_2.c$130$1$15 ==.
                                    865 ;	asgn2_2.c:130: P1_1=0;
      000186 C2 91            [12]  866 	clr	_P1_1
                           000126   867 	C$asgn2_2.c$131$1$15 ==.
                                    868 ;	asgn2_2.c:131: P1_0=1;
      000188 D2 90            [12]  869 	setb	_P1_0
                           000128   870 	C$asgn2_2.c$132$1$15 ==.
                                    871 ;	asgn2_2.c:132: t0Delay();
      00018A 12 00 62         [24]  872 	lcall	_t0Delay
                           00012B   873 	C$asgn2_2.c$133$1$15 ==.
                           00012B   874 	XG$display$0$0 ==.
      00018D 22               [24]  875 	ret
                                    876 ;------------------------------------------------------------
                                    877 ;Allocation info for local variables in function 't0Delay56ms'
                                    878 ;------------------------------------------------------------
                           00012C   879 	G$t0Delay56ms$0$0 ==.
                           00012C   880 	C$asgn2_2.c$136$1$15 ==.
                                    881 ;	asgn2_2.c:136: void t0Delay56ms()
                                    882 ;	-----------------------------------------
                                    883 ;	 function t0Delay56ms
                                    884 ;	-----------------------------------------
      00018E                        885 _t0Delay56ms:
                           00012C   886 	C$asgn2_2.c$138$1$16 ==.
                                    887 ;	asgn2_2.c:138: TMOD=0x01;
      00018E 75 89 01         [24]  888 	mov	_TMOD,#0x01
                           00012F   889 	C$asgn2_2.c$139$1$16 ==.
                                    890 ;	asgn2_2.c:139: TL0=0x00;
      000191 75 8A 00         [24]  891 	mov	_TL0,#0x00
                           000132   892 	C$asgn2_2.c$140$1$16 ==.
                                    893 ;	asgn2_2.c:140: TH0=0x35;
      000194 75 8C 35         [24]  894 	mov	_TH0,#0x35
                           000135   895 	C$asgn2_2.c$141$1$16 ==.
                                    896 ;	asgn2_2.c:141: TR0=1;
      000197 D2 8C            [12]  897 	setb	_TR0
                           000137   898 	C$asgn2_2.c$142$1$16 ==.
                                    899 ;	asgn2_2.c:142: while(	TF0==0 );
      000199                        900 00101$:
      000199 30 8D FD         [24]  901 	jnb	_TF0,00101$
                           00013A   902 	C$asgn2_2.c$143$1$16 ==.
                                    903 ;	asgn2_2.c:143: TR0=0;
      00019C C2 8C            [12]  904 	clr	_TR0
                           00013C   905 	C$asgn2_2.c$144$1$16 ==.
                                    906 ;	asgn2_2.c:144: TF0=0;	
      00019E C2 8D            [12]  907 	clr	_TF0
                           00013E   908 	C$asgn2_2.c$145$1$16 ==.
                           00013E   909 	XG$t0Delay56ms$0$0 ==.
      0001A0 22               [24]  910 	ret
                                    911 ;------------------------------------------------------------
                                    912 ;Allocation info for local variables in function 'main'
                                    913 ;------------------------------------------------------------
                                    914 ;acc                       Allocated to registers r6 r7 
                                    915 ;------------------------------------------------------------
                           00013F   916 	G$main$0$0 ==.
                           00013F   917 	C$asgn2_2.c$159$1$16 ==.
                                    918 ;	asgn2_2.c:159: void main(void)
                                    919 ;	-----------------------------------------
                                    920 ;	 function main
                                    921 ;	-----------------------------------------
      0001A1                        922 _main:
                           00013F   923 	C$asgn2_2.c$161$1$16 ==.
                                    924 ;	asgn2_2.c:161: int acc=0;
      0001A1 7E 00            [12]  925 	mov	r6,#0x00
      0001A3 7F 00            [12]  926 	mov	r7,#0x00
                           000143   927 	C$asgn2_2.c$162$1$18 ==.
                                    928 ;	asgn2_2.c:162: display(acc);
      0001A5 90 00 00         [24]  929 	mov	dptr,#0x0000
      0001A8 C0 07            [24]  930 	push	ar7
      0001AA C0 06            [24]  931 	push	ar6
      0001AC 12 01 57         [24]  932 	lcall	_display
      0001AF D0 06            [24]  933 	pop	ar6
      0001B1 D0 07            [24]  934 	pop	ar7
                           000151   935 	C$asgn2_2.c$163$1$18 ==.
                                    936 ;	asgn2_2.c:163: while(1)
      0001B3                        937 00108$:
                           000151   938 	C$asgn2_2.c$165$2$19 ==.
                                    939 ;	asgn2_2.c:165: if(P0_7==0)
      0001B3 20 87 26         [24]  940 	jb	_P0_7,00105$
                           000154   941 	C$asgn2_2.c$167$3$20 ==.
                                    942 ;	asgn2_2.c:167: acc = acc +1;
      0001B6 0E               [12]  943 	inc	r6
      0001B7 BE 00 01         [24]  944 	cjne	r6,#0x00,00125$
      0001BA 0F               [12]  945 	inc	r7
      0001BB                        946 00125$:
                           000159   947 	C$asgn2_2.c$168$1$18 ==.
                                    948 ;	asgn2_2.c:168: acc=acc%100;
      0001BB 75 08 64         [24]  949 	mov	__modsint_PARM_2,#0x64
      0001BE 75 09 00         [24]  950 	mov	(__modsint_PARM_2 + 1),#0x00
      0001C1 8E 82            [24]  951 	mov	dpl,r6
      0001C3 8F 83            [24]  952 	mov	dph,r7
      0001C5 12 02 64         [24]  953 	lcall	__modsint
      0001C8 AE 82            [24]  954 	mov	r6,dpl
      0001CA AF 83            [24]  955 	mov	r7,dph
                           00016A   956 	C$asgn2_2.c$169$3$20 ==.
                                    957 ;	asgn2_2.c:169: t0Delay56ms();
      0001CC C0 07            [24]  958 	push	ar7
      0001CE C0 06            [24]  959 	push	ar6
      0001D0 12 01 8E         [24]  960 	lcall	_t0Delay56ms
      0001D3 D0 06            [24]  961 	pop	ar6
      0001D5 D0 07            [24]  962 	pop	ar7
                           000175   963 	C$asgn2_2.c$170$3$20 ==.
                                    964 ;	asgn2_2.c:170: while(P0_7==0);
      0001D7                        965 00101$:
      0001D7 20 87 D9         [24]  966 	jb	_P0_7,00108$
      0001DA 80 FB            [24]  967 	sjmp	00101$
      0001DC                        968 00105$:
                           00017A   969 	C$asgn2_2.c$173$2$19 ==.
                                    970 ;	asgn2_2.c:173: display(acc);
      0001DC 8E 82            [24]  971 	mov	dpl,r6
      0001DE 8F 83            [24]  972 	mov	dph,r7
      0001E0 C0 07            [24]  973 	push	ar7
      0001E2 C0 06            [24]  974 	push	ar6
      0001E4 12 01 57         [24]  975 	lcall	_display
      0001E7 D0 06            [24]  976 	pop	ar6
      0001E9 D0 07            [24]  977 	pop	ar7
      0001EB 80 C6            [24]  978 	sjmp	00108$
                           00018B   979 	C$asgn2_2.c$176$1$18 ==.
                           00018B   980 	XG$main$0$0 ==.
      0001ED 22               [24]  981 	ret
                                    982 	.area CSEG    (CODE)
                                    983 	.area CONST   (CODE)
                                    984 	.area XINIT   (CODE)
                                    985 	.area CABS    (ABS,CODE)
